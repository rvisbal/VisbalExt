# Cursor Rules for Visbal Extension

# View Implementation Rules
views.treeview: When implementing a TreeView in the extension:
- Use vscode.TreeDataProvider interface for tree data management
- Implement getTreeItem and getChildren methods
- Use vscode.TreeItemCollapsibleState for collapsible items
- Register the view in package.json under the appropriate viewContainer
- Add icons using vscode.ThemeIcon for visual indicators
- Use the webview type for complex views, tree type for simple hierarchical data

# UI Component Rules
ui.buttons: When adding buttons to the UI:
- Use VS Code's built-in Codicon set for icons (e.g., 'codicon-add', 'codicon-remove')
- Follow VS Code's theming by using CSS variables (var(--vscode-button-background))
- Add tooltips for better UX using the title attribute
- Include appropriate aria-labels for accessibility
- Place action buttons in consistent locations (e.g., toolbar)

# Command Registration Rules
commands: When adding new commands:
- Register in package.json under "contributes.commands"
- Include a category prefix (e.g., "Visbal:")
- Add appropriate icons using Codicon references
- Implement command handlers in extension.ts
- Use consistent naming pattern: 'visbal-ext.commandName' or 'visbal.commandName'

# View Container Rules
viewcontainers: When adding new view containers:
- Register in package.json under "contributes.viewsContainers"
- Use appropriate container location (panel, activitybar, debug)
- Include relevant Codicon icon
- Group related views together in the same container
- Use consistent ID pattern: 'visbal-{type}-container'

# Webview Rules
webviews: When implementing webviews:
- Use retainContextWhenHidden for persistent views
- Implement proper message passing between extension and webview
- Use VS Code's styling variables for consistent theming
- Handle view state persistence where needed
- Include proper error handling and loading states

# API Integration Rules
api: When implementing Salesforce API calls:
- Use the salesforceApiService for all API interactions
- Include proper error handling and status updates
- Show progress in the status bar during operations
- Use the MetadataService for metadata operations
- Cache results when appropriate to improve performance

# Logging Rules
logging: When adding logging:
- Use the outputChannel for extension-level logging
- Include appropriate log levels and categories
- Add timestamps for important operations
- Log both success and error cases
- Use consistent message format: '[VisbalExt.Component] methodName -- Action -- Details'

# Status Bar Rules
statusbar: When updating status bar:
- Use statusBarService for all status updates
- Show progress during long-running operations
- Include appropriate icons for different states
- Clear status when operations complete
- Use consistent message formatting

# Tree View Implementation Rules
treeview.implementation: When implementing tree views:
- Extend vscode.TreeItem for custom items
- Implement refresh mechanism using EventEmitter
- Add collapsible state for parent items
- Include appropriate icons and tooltips
- Handle selection and expansion states 